name: Build

on:
  push:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x86, x64, arm, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Prepare certificate
        # run: |
        #   $certfile = Get-Item "./ExViewer/ExViewer_TemporaryKey.pfx"
        #   Import-PfxCertificate $certfile -Password (ConvertTo-SecureString -AsPlainText "${{ secrets.CERT_PASS }}" -Force) -CertStoreLocation Cert:\CurrentUser\My\
        run: |
          New-SelfSignedCertificate -Subject "CN=Opportunity" -CertStoreLocation Cert:\CurrentUser\My\

      - name: Restore nuget cache
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-

      - name: Restore the application
        run: |
          nuget restore

      - name: Generate string files
        run: |
          $NugetPackage = nuget locals global-packages -list
          $NugetPackage = $NugetPackage.SubString(17)
          $ToolVersions = (Get-ChildItem (Join-Path $NugetPackage 'Opportunity.ResourceGenerator') | Sort-Object Name -Descending)[0]
          $ToolPath = Join-Path $ToolVersions.FullName '/tools/Opportunity.ResourceGenerator.Generator.exe'
          &$ToolPath "./ExViewer.sln"

      - name: Generate env files
        run: |
          @"
          namespace ExViewer { class Github {
          public const string BRANCH = "${{ github.ref_name }}";
          public const string COMMIT = "${{ github.sha }}";
          } }
          "@ > ./ExViewer/Github.cs
          Get-Content ./ExViewer/Github.cs

      - name: Build the application
        run: msbuild ExViewer.sln /p:Configuration=Release /p:Platform=${{ matrix.arch }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: MSIX Package
          path: ExViewer/AppPackages
